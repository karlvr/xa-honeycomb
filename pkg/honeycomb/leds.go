package honeycomb

const (
	LED_FUEL_PUMP     = 1
	LED_PARKING_BRAKE = 2
	LED_LOW_VOLTS     = 4
	LED_DOOR          = 8

	LED_LOW_OIL_PRESS  = 1
	LED_LOW_FUEL_PRESS = 2
	LED_ANTI_ICE       = 4
	LED_STARTER        = 8
	LED_APU            = 16
	LED_MASTER_CAUTION = 32
	LED_VACUUM         = 64
	LED_LOW_HYD_PRESS  = 128

	LED_LEFT_GEAR_GREEN  = 1
	LED_LEFT_GEAR_RED    = 2
	LED_NOSE_GEAR_GREEN  = 4
	LED_NOSE_GEAR_RED    = 8
	LED_RIGHT_GEAR_GREEN = 16
	LED_RIGHT_GEAR_RED   = 32
	LED_MASTER_WARNING   = 64
	LED_ENGINE_FIRE      = 128

	LED_HEADING = 1
	LED_NAV     = 2
	LED_APR     = 4
	LED_REV     = 8
	LED_ALT     = 16
	LED_VS      = 32
	LED_IAS     = 64
	LED_AP      = 128
)

// Global variables for state
var (
	ANUNCIATOR_W2     byte = 0
	ANUNCIATOR_W1     byte = 0
	LANDING_GEAR_W    byte = 0
	AUTO_PILOT_W      byte = 0
	LED_STATE_CHANGED      = false
)

func setBit(val byte, bit byte) byte {
	return val | bit
}

func clearBit(val byte, bit byte) byte {
	return val &^ bit
}

func OnLEDFuelPump() {
	ANUNCIATOR_W2_BEFORE := ANUNCIATOR_W2
	ANUNCIATOR_W2 = setBit(ANUNCIATOR_W2, LED_FUEL_PUMP)
	LED_STATE_CHANGED = ANUNCIATOR_W2_BEFORE != ANUNCIATOR_W2
}

func OffLEDFuelPump() {
	ANUNCIATOR_W2_BEFORE := ANUNCIATOR_W2
	ANUNCIATOR_W2 = clearBit(ANUNCIATOR_W2, LED_FUEL_PUMP)
	LED_STATE_CHANGED = ANUNCIATOR_W2_BEFORE != ANUNCIATOR_W2
}

func OnLEDParkingBrake() {
	ANUNCIATOR_W2_BEFORE := ANUNCIATOR_W2
	ANUNCIATOR_W2 = setBit(ANUNCIATOR_W2, LED_PARKING_BRAKE)
	LED_STATE_CHANGED = ANUNCIATOR_W2_BEFORE != ANUNCIATOR_W2
}

func OffLEDParkingBrake() {
	ANUNCIATOR_W2_BEFORE := ANUNCIATOR_W2
	ANUNCIATOR_W2 = clearBit(ANUNCIATOR_W2, LED_PARKING_BRAKE)
	LED_STATE_CHANGED = ANUNCIATOR_W2_BEFORE != ANUNCIATOR_W2
}

func OnLEDLowVolts() {
	ANUNCIATOR_W2_BEFORE := ANUNCIATOR_W2
	ANUNCIATOR_W2 = setBit(ANUNCIATOR_W2, LED_LOW_VOLTS)
	LED_STATE_CHANGED = ANUNCIATOR_W2_BEFORE != ANUNCIATOR_W2
}

func OffLEDLowVolts() {
	ANUNCIATOR_W2_BEFORE := ANUNCIATOR_W2
	ANUNCIATOR_W2 = clearBit(ANUNCIATOR_W2, LED_LOW_VOLTS)
	LED_STATE_CHANGED = ANUNCIATOR_W2_BEFORE != ANUNCIATOR_W2
}

func OnLEDDoor() {
	ANUNCIATOR_W2_BEFORE := ANUNCIATOR_W2
	ANUNCIATOR_W2 = setBit(ANUNCIATOR_W2, LED_DOOR)
	LED_STATE_CHANGED = ANUNCIATOR_W2_BEFORE != ANUNCIATOR_W2
}

func OffLEDDoor() {
	ANUNCIATOR_W2_BEFORE := ANUNCIATOR_W2
	ANUNCIATOR_W2 = clearBit(ANUNCIATOR_W2, LED_DOOR)
	LED_STATE_CHANGED = ANUNCIATOR_W2_BEFORE != ANUNCIATOR_W2
}

// ANUNCIATOR_W1 LEDs
func OnLEDLowOilPress() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = setBit(ANUNCIATOR_W1, LED_LOW_OIL_PRESS)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}
func OffLEDLowOilPress() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = clearBit(ANUNCIATOR_W1, LED_LOW_OIL_PRESS)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OnLEDLowFuelPress() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = setBit(ANUNCIATOR_W1, LED_LOW_FUEL_PRESS)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OffLEDLowFuelPress() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = clearBit(ANUNCIATOR_W1, LED_LOW_FUEL_PRESS)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OnLEDAntiIce() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = setBit(ANUNCIATOR_W1, LED_ANTI_ICE)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OffLEDAntiIce() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = clearBit(ANUNCIATOR_W1, LED_ANTI_ICE)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OnLEDStarter() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = setBit(ANUNCIATOR_W1, LED_STARTER)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OffLEDStarter() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = clearBit(ANUNCIATOR_W1, LED_STARTER)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OnLEDApu() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = setBit(ANUNCIATOR_W1, LED_APU)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OffLEDApu() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = clearBit(ANUNCIATOR_W1, LED_APU)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OnLEDMasterCaution() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = setBit(ANUNCIATOR_W1, LED_MASTER_CAUTION)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OffLEDMasterCaution() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = clearBit(ANUNCIATOR_W1, LED_MASTER_CAUTION)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OnLEDVacuum() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = setBit(ANUNCIATOR_W1, LED_VACUUM)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OffLEDVacuum() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = clearBit(ANUNCIATOR_W1, LED_VACUUM)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OnLEDLowHydPress() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = setBit(ANUNCIATOR_W1, LED_LOW_HYD_PRESS)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

func OffLEDLowHydPress() {
	ANUNCIATOR_W1_BEFORE := ANUNCIATOR_W1
	ANUNCIATOR_W1 = clearBit(ANUNCIATOR_W1, LED_LOW_HYD_PRESS)
	LED_STATE_CHANGED = ANUNCIATOR_W1_BEFORE != ANUNCIATOR_W1
}

// LANDING_GEAR_W LEDs
func OnLEDLeftGearGreen() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = setBit(LANDING_GEAR_W, LED_LEFT_GEAR_GREEN)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OffLEDLeftGearGreen() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = clearBit(LANDING_GEAR_W, LED_LEFT_GEAR_GREEN)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OnLEDLeftGearRed() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = setBit(LANDING_GEAR_W, LED_LEFT_GEAR_RED)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OffLEDLeftGearRed() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = clearBit(LANDING_GEAR_W, LED_LEFT_GEAR_RED)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OnLEDNoseGearGreen() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = setBit(LANDING_GEAR_W, LED_NOSE_GEAR_GREEN)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OffLEDNoseGearGreen() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = clearBit(LANDING_GEAR_W, LED_NOSE_GEAR_GREEN)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OnLEDNoseGearRed() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = setBit(LANDING_GEAR_W, LED_NOSE_GEAR_RED)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OffLEDNoseGearRed() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = clearBit(LANDING_GEAR_W, LED_NOSE_GEAR_RED)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OnLEDRightGearGreen() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = setBit(LANDING_GEAR_W, LED_RIGHT_GEAR_GREEN)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OffLEDRightGearGreen() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = clearBit(LANDING_GEAR_W, LED_RIGHT_GEAR_GREEN)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OnLEDRightGearRed() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = setBit(LANDING_GEAR_W, LED_RIGHT_GEAR_RED)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OffLEDRightGearRed() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = clearBit(LANDING_GEAR_W, LED_RIGHT_GEAR_RED)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OnLedGearGreen() {
	OnLEDLeftGearGreen()
	OffLEDLeftGearRed()
	OnLEDNoseGearGreen()
	OffLEDNoseGearRed()
	OnLEDRightGearGreen()
	OffLEDRightGearRed()
}

func OnLedGearRed() {
	OnLEDLeftGearRed()
	OffLEDLeftGearGreen()
	OnLEDNoseGearRed()
	OffLEDNoseGearGreen()
	OnLEDRightGearRed()
	OffLEDRightGearGreen()
}

func OnLEDMasterWarning() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = setBit(LANDING_GEAR_W, LED_MASTER_WARNING)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OffLEDMasterWarning() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = clearBit(LANDING_GEAR_W, LED_MASTER_WARNING)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OnLEDEngineFire() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = setBit(LANDING_GEAR_W, LED_ENGINE_FIRE)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

func OffLEDEngineFire() {
	LANDING_GEAR_W_BEFORE := LANDING_GEAR_W
	LANDING_GEAR_W = clearBit(LANDING_GEAR_W, LED_ENGINE_FIRE)
	LED_STATE_CHANGED = LANDING_GEAR_W_BEFORE != LANDING_GEAR_W
}

// AUTO_PILOT_W LEDs
func OnLEDHeading() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = setBit(AUTO_PILOT_W, LED_HEADING)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OffLEDHeading() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = clearBit(AUTO_PILOT_W, LED_HEADING)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OnLEDNav() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = setBit(AUTO_PILOT_W, LED_NAV)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OffLEDNav() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = clearBit(AUTO_PILOT_W, LED_NAV)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OnLEDAPR() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = setBit(AUTO_PILOT_W, LED_APR)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OffLEDAPR() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = clearBit(AUTO_PILOT_W, LED_APR)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OnLEDREV() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = setBit(AUTO_PILOT_W, LED_REV)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OffLEDREV() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = clearBit(AUTO_PILOT_W, LED_REV)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OnLEDAlt() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = setBit(AUTO_PILOT_W, LED_ALT)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OffLEDAlt() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = clearBit(AUTO_PILOT_W, LED_ALT)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OnLEDVS() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = setBit(AUTO_PILOT_W, LED_VS)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OffLEDVS() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = clearBit(AUTO_PILOT_W, LED_VS)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OnLEDIAS() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = setBit(AUTO_PILOT_W, LED_IAS)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OffLEDIAS() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = clearBit(AUTO_PILOT_W, LED_IAS)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OnLEDAP() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = setBit(AUTO_PILOT_W, LED_AP)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

func OffLEDAP() {
	AUTO_PILOT_W_BEFORE := AUTO_PILOT_W
	AUTO_PILOT_W = clearBit(AUTO_PILOT_W, LED_AP)
	LED_STATE_CHANGED = AUTO_PILOT_W_BEFORE != AUTO_PILOT_W
}

// DebugPrintLEDStates prints the current state of all LEDs
func (b *bravoService) DebugPrintLEDStates() {
	b.Logger.Debug("ANUNCIATOR_W2 LEDs:")
	if ANUNCIATOR_W2&LED_FUEL_PUMP != 0 {
		b.Logger.Debug("- Fuel Pump is ON")
	}
	if ANUNCIATOR_W2&LED_PARKING_BRAKE != 0 {
		b.Logger.Debug("- Parking Brake is ON")
	}
	if ANUNCIATOR_W2&LED_LOW_VOLTS != 0 {
		b.Logger.Debug("- Low Volts is ON")
	}
	if ANUNCIATOR_W2&LED_DOOR != 0 {
		b.Logger.Debug("- Door is ON")
	}

	b.Logger.Debug("ANUNCIATOR_W1 LEDs:")
	if ANUNCIATOR_W1&LED_LOW_OIL_PRESS != 0 {
		b.Logger.Debug("- Low Oil Pressure is ON")
	}
	if ANUNCIATOR_W1&LED_LOW_FUEL_PRESS != 0 {
		b.Logger.Debug("- Low Fuel Pressure is ON")
	}
	if ANUNCIATOR_W1&LED_ANTI_ICE != 0 {
		b.Logger.Debug("- Anti-Ice is ON")
	}
	if ANUNCIATOR_W1&LED_STARTER != 0 {
		b.Logger.Debug("- Starter is ON")
	}
	if ANUNCIATOR_W1&LED_APU != 0 {
		b.Logger.Debug("- APU is ON")
	}
	if ANUNCIATOR_W1&LED_MASTER_CAUTION != 0 {
		b.Logger.Debug("- Master Caution is ON")
	}
	if ANUNCIATOR_W1&LED_VACUUM != 0 {
		b.Logger.Debug("- Vacuum is ON")
	}
	if ANUNCIATOR_W1&LED_LOW_HYD_PRESS != 0 {
		b.Logger.Debug("- Low Hydraulic Pressure is ON")
	}

	b.Logger.Debug("LANDING_GEAR_W LEDs:")
	if LANDING_GEAR_W&LED_LEFT_GEAR_GREEN != 0 {
		b.Logger.Debug("- Left Gear Green is ON")
	}
	if LANDING_GEAR_W&LED_LEFT_GEAR_RED != 0 {
		b.Logger.Debug("- Left Gear Red is ON")
	}
	if LANDING_GEAR_W&LED_NOSE_GEAR_GREEN != 0 {
		b.Logger.Debug("- Nose Gear Green is ON")
	}
	if LANDING_GEAR_W&LED_NOSE_GEAR_RED != 0 {
		b.Logger.Debug("- Nose Gear Red is ON")
	}
	if LANDING_GEAR_W&LED_RIGHT_GEAR_GREEN != 0 {
		b.Logger.Debug("- Right Gear Green is ON")
	}
	if LANDING_GEAR_W&LED_RIGHT_GEAR_RED != 0 {
		b.Logger.Debug("- Right Gear Red is ON")
	}
	if LANDING_GEAR_W&LED_MASTER_WARNING != 0 {
		b.Logger.Debug("- Master Warning is ON")
	}
	if LANDING_GEAR_W&LED_ENGINE_FIRE != 0 {
		b.Logger.Debug("- Engine Fire is ON")
	}

	b.Logger.Debug("AUTO_PILOT_W LEDs:")
	if AUTO_PILOT_W&LED_HEADING != 0 {
		b.Logger.Debug("- Heading is ON")
	}
	if AUTO_PILOT_W&LED_NAV != 0 {
		b.Logger.Debug("- Navigation is ON")
	}
	if AUTO_PILOT_W&LED_APR != 0 {
		b.Logger.Debug("- Approach is ON")
	}
	if AUTO_PILOT_W&LED_REV != 0 {
		b.Logger.Debug("- Reverse is ON")
	}
	if AUTO_PILOT_W&LED_ALT != 0 {
		b.Logger.Debug("- Altitude is ON")
	}
	if AUTO_PILOT_W&LED_VS != 0 {
		b.Logger.Debug("- Vertical Speed is ON")
	}
	if AUTO_PILOT_W&LED_IAS != 0 {
		b.Logger.Debug("- Indicated Airspeed is ON")
	}
	if AUTO_PILOT_W&LED_AP != 0 {
		b.Logger.Debug("- Autopilot is ON")
	}
}

func AllOff() {
	ANUNCIATOR_W2 = 0
	ANUNCIATOR_W1 = 0
	LANDING_GEAR_W = 0
	AUTO_PILOT_W = 0
	LED_STATE_CHANGED = true
}
